[project]
name = "command-line-assistant"
version = "0.2.2"
description = "A simple wrapper to interact with RAG"
authors = [
    { name = "RHEL Lightspeed Team", email = "rhel-sst-lightspeed@redhat.com" },
]
maintainers = [
    { name = "Rodolfo Olivieri", email = "rolivier@redhat.com" },
    { name = "Major Hayden", email = "mhayden@redhat.com" },
]
dependencies = [
    # tomli is only required below 3.11 as it is native after that version.
    'tomli; python_version<"3.11"',
    "requests",
    "dasbus",
    "sqlalchemy>=2.0.37",
]
requires-python = ">=3.9,<4.0" # RHEL 9 and 10
readme = "README.md"
license = { file = "LICENSE" }
classifiers = ["Programming Language :: Python :: 3"]
urls = { Repository = "https://github.com/rhel-lightspeed/command-line-assistant.git", Issues = "https://github.com/rhel-lightspeed/command-line-assistant/issues" }
scripts = { c = "command_line_assistant.initialize:initialize", clad = "command_line_assistant.daemon.clad:daemonize" }

[build-system]
# poetry build is not available in rhel baseos repositories
requires = ["setuptools", "wheel"]
build-backend = "setuptools.build_meta"

[project.optional-dependencies]
db = ["psycopg2>=2.9.10", "mysqlclient>=2.2.7"]
tests = [
    "pytest==8.3.4",
    "pytest-cov==6.0.0",
    "pytest-randomly==3.16.0",
    "coverage==7.6.10",
    "pytest-sugar==1.0.0",
    "pytest-clarity==1.0.1",
    "tox>=4.23.2",
    "responses>=0.25.3",
]
dev = [
    "PyGObject>=3.50.0",
    # added here mainly for editor happines
    "ruff>=0.9.4"
]

# ----- Tooling specifics
[tool.setuptools.packages.find]
include = ["command_line_assistant*"]
namespaces = false

[tool.ruff]
# Enable ruff rules to act like flake8
#   https://docs.astral.sh/ruff/rules/#rules
lint.select = [
    "E",   # pycodestyle (formerly part of flake8)
    "F",   # pyflakes (formerly part of flake8)
    "I",   # import order (like isort)
    "B",   # flake8-bugbear
    "C90", # flake8-comprehensions
    "G",   # flak8-logging-format
]

# Exclude specific rules if needed
lint.ignore = [
    "E501", # Ignore line length (similar to flake8's max-line-length)
]

[tool.poetry]
package-mode = false

[tool.pytest.init_options]
testpaths = ["tests"]

[tool.coverage.report]
skip_empty = true

[tool.coverage.run]
branch = true
source = ["command_line_assistant"]

[tool.codespell]
skip = 'data/release/man/*,data/release/selinux/Makefile'
count = true
