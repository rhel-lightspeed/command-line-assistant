# Only used to run sonarqube analysis currently.
default:
  tags:
    - shared-podman

image:
  name: images.paas.redhat.com/alm/sonar-scanner-alpine
  entrypoint: [""]

variables:
  POETRY_NO_INTERACTION: "1"
  POETRY_VIRTUALENVS_IN_PROJECT: "1"
  POETRY_VIRTUALENVS_CREATE: "1"
  POETRY_CACHE_DIR: "/tmp/poetry_cache"
  SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar" # Defines the location of the analysis task cache
  GIT_DEPTH: "0" # Tells git to fetch all the branches of the project, required by the analysis task

stages:
  - tests
  - sonarqube-check
  - sonarqube-vulnerability-report

unit-tests:
  stage: tests
  image: docker.io/library/python:3.9
  script:
    - apt update -y
    - apt install libgirepository1.0-dev gcc libcairo2-dev pkg-config python3-dev gir1.2-gtk-4.0 -y
    - make install
    - make unit-test-coverage
    - make coverage
  artifacts:
    paths:
      - coverage.xml
    expire_in: 20 minutes
  cache:
    paths:
      - .pytest_cache
      - .ruff_cache
      - .venv

sonarqube-check:
  stage: sonarqube-check
  needs:
    - unit-tests
  script:
    - sonar-scanner -Dsonar.host.url="${SONAR_HOST_URL}"
  allow_failure: true
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
    - if: $CI_COMMIT_BRANCH == 'master'
    - if: $CI_COMMIT_BRANCH == 'main'
    - if: $CI_COMMIT_BRANCH == 'develop'

sonarqube-vulnerability-report:
  stage: sonarqube-vulnerability-report
  needs:
    - unit-tests
  script:
    - 'curl -u "${SONAR_TOKEN}:" "${SONAR_HOST_URL}/api/issues/gitlab_sast_export?projectKey=rhel-lightspeed.command-line-assistant&branch=${CI_COMMIT_BRANCH}&pullRequest=${CI_MERGE_REQUEST_IID}" -o gl-sast-sonar-report.json'
  allow_failure: true
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
    - if: $CI_COMMIT_BRANCH == 'master'
    - if: $CI_COMMIT_BRANCH == 'main'
    - if: $CI_COMMIT_BRANCH == 'develop'
  artifacts:
    expire_in: 1 day
    reports:
      sast: gl-sast-sonar-report.json
